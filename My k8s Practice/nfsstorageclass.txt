---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: nfs-pod-provisioner-sa
  namespace: kube-system
---
kind: ClusterRole # Role of kubernetes
apiVersion: rbac.authorization.k8s.io/v1 # auth API
metadata:
  name: nfs-provisioner-clusterRole
rules:
  - apiGroups: [""] # rules on persistentvolumes
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-provisioner-rolebinding
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa # defined on top of file
    namespace: kube-system
roleRef: # binding cluster role to service account
  kind: ClusterRole
  name: nfs-provisioner-clusterRole # name defined in clusterRole
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa # same as top of the file
    # replace with namespace where provisioner is deployed
    namespace: kube-system
roleRef:
  kind: Role
  name: nfs-pod-provisioner-otherRoles
  apiGroup: rbac.authorization.k8s.io
  
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nfs-pod-provisioner
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-pod-provisioner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-pod-provisioner
    spec:
      serviceAccountName: nfs-pod-provisioner-sa # name of service account created in rbac.yaml
      containers:
        - name: nfs-pod-provisioner
          image: rkevin/nfs-subdir-external-provisioner:fix-k8s-1.20
          volumeMounts:
            - name: nfs-provisioner-v
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME # do not change
              value: nfs-provisioner # SAME AS PROVISONER NAME VALUE IN STORAGECLASS
            - name: NFS_SERVER # do not change
              value: 172.31.37.244 # Ip of the NFS SERVER
            - name: NFS_PATH # do not change
              value: /mnt/nfs_share # path to nfs directory setup
      volumes:
       - name: nfs-provisioner-v # same as volumemouts name
         nfs:
           server: 172.31.37.244
           path:  /mnt/nfs_share   
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storageclass # IMPORTANT pvc needs to mention this name
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs-provisioner # name can be anything
parameters:
  archiveOnDelete: "false"



---------

Explaination of Above 


Sure, let's break down the YAML file in detail, explaining each section and its purpose in the context of deploying an NFS provisioner in Kubernetes.

### ServiceAccount
```yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: nfs-pod-provisioner-sa
  namespace: kube-system
```
- **ServiceAccount**: A ServiceAccount in Kubernetes provides an identity for processes that run in a Pod. This identity is used to control access to the Kubernetes API.
- **metadata**: Contains the name of the service account (`nfs-pod-provisioner-sa`) and specifies that it will reside in the `kube-system` namespace.

### ClusterRole
```yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-provisioner-clusterRole
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
```
- **ClusterRole**: Defines a set of permissions (rules) that apply across the entire cluster.
- **rules**:
  - Grants the ability to manage persistent volumes (PVs).
  - Grants the ability to manage persistent volume claims (PVCs).
  - Grants read access to storage classes.
  - Grants permissions to create and update events.

### ClusterRoleBinding
```yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-provisioner-rolebinding
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: nfs-provisioner-clusterRole
  apiGroup: rbac.authorization.k8s.io
```
- **ClusterRoleBinding**: Binds the `ClusterRole` to the `ServiceAccount`, effectively granting the permissions defined in the `ClusterRole` to the service account.
- **subjects**: The entity (ServiceAccount) that the role is assigned to.
- **roleRef**: Specifies the `ClusterRole` that is being assigned.

### Role
```yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
```
- **Role**: Similar to `ClusterRole`, but applies to a specific namespace (`kube-system` in this case).
- **rules**: Grants the ability to manage endpoints within the namespace.

### RoleBinding
```yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa
    namespace: kube-system
roleRef:
  kind: Role
  name: nfs-pod-provisioner-otherRoles
  apiGroup: rbac.authorization.k8s.io
```
- **RoleBinding**: Binds the `Role` to the `ServiceAccount` within the `kube-system` namespace.
- **subjects**: The entity (ServiceAccount) that the role is assigned to.
- **roleRef**: Specifies the `Role` that is being assigned.

### Deployment
```yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nfs-pod-provisioner
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-pod-provisioner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-pod-provisioner
    spec:
      serviceAccountName: nfs-pod-provisioner-sa
      containers:
        - name: nfs-pod-provisioner
          image: rkevin/nfs-subdir-external-provisioner:fix-k8s-1.20
          volumeMounts:
            - name: nfs-provisioner-v
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: nfs-provisioner
            - name: NFS_SERVER
              value: 172.31.37.244
            - name: NFS_PATH
              value: /mnt/nfs_share
      volumes:
       - name: nfs-provisioner-v
         nfs:
           server: 172.31.37.244
           path:  /mnt/nfs_share
```
- **Deployment**: Manages the deployment of the NFS provisioner pod.
- **metadata**: Specifies the name (`nfs-pod-provisioner`) and namespace (`kube-system`) for the deployment.
- **spec**:
  - **replicas**: The number of pod replicas (1 in this case).
  - **selector**: Specifies how to identify the pods managed by this deployment using a label.
  - **strategy**: Deployment strategy (`Recreate` means all existing pods will be killed before new ones are created).
  - **template**:
    - **metadata**: Contains labels for the pod.
    - **spec**:
      - **serviceAccountName**: Uses the previously created service account.
      - **containers**: Defines the container to run.
        - **name**: Container name.
        - **image**: The container image to use.
        - **volumeMounts**: Specifies where to mount volumes in the container.
        - **env**: Environment variables for the container, including the provisioner name, NFS server IP, and NFS path.
      - **volumes**: Defines volumes to be mounted in the container.
        - **nfs**: Specifies an NFS volume with the server and path.

### StorageClass
```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storageclass
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs-provisioner
parameters:
  archiveOnDelete: "false"
```
- **StorageClass**: Defines a storage class for dynamic provisioning of storage.
- **metadata**: Contains the name of the storage class (`nfs-storageclass`).
  - **annotations**: Marks this storage class as the default class.
- **provisioner**: Specifies the name of the provisioner to use.
- **parameters**: Additional parameters for the provisioner, such as not archiving data on delete.

### Summary
- **ServiceAccount**: `nfs-pod-provisioner-sa` allows the NFS provisioner pod to interact with the Kubernetes API.
- **ClusterRole** and **Role**: Define permissions for the provisioner.
- **ClusterRoleBinding** and **RoleBinding**: Grant these permissions to the service account.
- **Deployment**: Deploys the NFS provisioner pod, configured with the necessary environment variables and volume mounts.
- **StorageClass**: Defines a default storage class for dynamic provisioning using the NFS provisioner.